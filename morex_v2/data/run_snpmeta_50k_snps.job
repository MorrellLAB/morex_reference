#!/bin/bash
#PBS -l mem=1gb,nodes=1:ppn=20,walltime=86:00:00
#PBS -m abe
#PBS -M liux1299@umn.edu
#PBS -q small

set -e
set -o pipefail

# This script runs SNPMeta on the 50k snps dataset in parallel. SNPMeta can take a long time to run,
# so this script is designed to check if the output file exists and run SNPMeta if it doesn't exist.
# This allows us to re-submit the same job without modifications when we run out of walltime. Only
# the samples that have not completed or have not started running will be processed upon re-submitting
# this job script.

# Dependencies
module load python3/3.7.1_anaconda
module load emboss/6.6.0
module load parallel
export PATH=${PATH}:/panfs/roc/groups/9/morrellp/liux1299/Software/SNPMeta

# User provided input arguments
FASTA=/panfs/roc/groups/9/morrellp/shared/Datasets/Genotyping/Contextual_Sequences/barley_50k/snpmeta_50k_snps.fasta
EMAIL=liux1299@umn.edu
OUT_DIR=/panfs/roc/groups/9/morrellp/liux1299/GitHub/morex_reference/morex_v2/data

#-------------------
# Check if out dir exists, if not make it
mkdir -p ${OUT_DIR} ${OUT_DIR}/temp ${OUT_DIR}/temp_ann_split

# Prepare files for running in parallel
SNP_ARR=($(grep ">" ${FASTA} | sed -e 's,>,,'))

function split_fasta() {
    local snp=$1
    local fasta_file=$2
    local out_dir=$3
    # Identify line number of fasta file
    tmp_line=$(grep -n "\<${snp}\>" ${fasta_file} | cut -d':' -f 1)
    tmp_seq_line=$[${tmp_line} + 1]
    # Extract sequence associated with SNP
    sed -n ${tmp_line},${tmp_seq_line}p ${fasta_file} > ${out_dir}/temp/${snp}.fasta
}

export -f split_fasta

function run_snpmeta() {
    local fasta_seq=$1 # For a single SNP
    local email=$2
    local out_dir=$3
    out_filename=$(basename ${fasta_seq} .fasta)
    SNPMeta.py -f ${fasta_seq} -i -a ${email} --outfmt tabular > ${out_dir}/temp_ann_split/${out_filename}.txt
}

export -f run_snpmeta

# Split fasta file for parallel processing later on
# Note: This step can take ~45 min if there are > 41,000 files
# So, we will skip it if the fasta file exists
for i in ${SNP_ARR[@]}
do
    if ls ${OUT_DIR}/temp/${i}.fasta 1> /dev/null 2>&1
    then
        echo "${i}.fasta file exists"
    else
        if grep -nq "\<${i}\>" ${FASTA}
        then
            split_fasta ${i} ${FASTA} ${OUT_DIR}
        else
            echo "${i} not in contextual fasta file"
        fi
    fi
done

# Generate sample list
cd ${OUT_DIR}/temp
find $(pwd -P) -name "*.fasta" | sort -V > ${OUT_DIR}/temp/all_fasta_list.txt
FASTA_ARR=($(cat ${OUT_DIR}/temp/all_fasta_list.txt))

# Add code to check if files exist or if file exists but is empty (0 bytes)
# If it already exists and is not 0 bytes, remove from FASTA_ARR because it's already done processing
# Check if directory contains files
if [ -n "$(ls -A ${OUT_DIR}/temp_ann_split 2>/dev/null)" ]
then
    # Contains files
    cd ${OUT_DIR}/temp_ann_split
    # Create a list of all files in temp_ann_split
    find -name "*.txt" | sed -e 's,./,,' -e 's,.txt,,' | sort -V > ${OUT_DIR}/temp_all_ann_files.txt
    # Create a list of empty files
    find -empty -name "*.txt" | sed -e 's,./,,' -e 's,.txt,,' | sort -V > ${OUT_DIR}/temp_empty_ann_files_to_rerun.txt
    # Create a list of appears to be completed ann files
    # (we will do a final check based on stderr file once all samples appear to be done)
    grep -vf ${OUT_DIR}/temp_empty_ann_files_to_rerun.txt ${OUT_DIR}/temp_all_ann_files.txt > ${OUT_DIR}/temp_completed_ann_files.txt
    # Create FASTA_ARR excluding completed samples
    FASTA_ARR=($(grep -vf ${OUT_DIR}/temp_completed_ann_files.txt ${OUT_DIR}/temp/all_fasta_list.txt))
fi

# Run program in parallel
parallel run_snpmeta {} ${EMAIL} ${OUT_DIR} ::: ${FASTA_ARR[@]}
